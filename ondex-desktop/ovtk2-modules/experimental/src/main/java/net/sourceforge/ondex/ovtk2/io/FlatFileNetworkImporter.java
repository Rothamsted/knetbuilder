package net.sourceforge.ondex.ovtk2.io;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import com.google.common.collect.Maps;
import com.google.common.collect.Multimaps;
import com.google.common.collect.SetMultimap;

import net.sourceforge.ondex.core.AttributeName;
import net.sourceforge.ondex.core.ConceptAccession;
import net.sourceforge.ondex.core.ConceptClass;
import net.sourceforge.ondex.core.ConceptName;
import net.sourceforge.ondex.core.DataSource;
import net.sourceforge.ondex.core.EvidenceType;
import net.sourceforge.ondex.core.ONDEXConcept;
import net.sourceforge.ondex.core.ONDEXGraph;
import net.sourceforge.ondex.core.ONDEXRelation;
import net.sourceforge.ondex.core.RelationType;
import net.sourceforge.ondex.core.base.util.ArrayKey;
import net.sourceforge.ondex.ovtk2.ui.OVTK2Desktop;
import net.sourceforge.ondex.ovtk2.ui.OVTK2Desktop.Position;
import net.sourceforge.ondex.ovtk2.ui.OVTK2PropertiesAggregator;
import net.sourceforge.ondex.ovtk2.ui.OVTK2Viewer;
import net.sourceforge.ondex.ovtk2.ui.console.VisualizationHandler;
import net.sourceforge.ondex.ovtk2.ui.dialog.WelcomeDialog;
import net.sourceforge.ondex.ovtk2.util.DesktopUtils;
import net.sourceforge.ondex.tools.ondex.MdHelper;

/**
 *
 * @author lysenkoa
 */
public class FlatFileNetworkImporter extends javax.swing.JInternalFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	//
    private javax.swing.JButton btnEdgesBrowse;
    private javax.swing.JButton btnEdgesCheck;
    private javax.swing.JButton btnEdgesImport;
    private javax.swing.JButton btnEdgesLoad;
    private javax.swing.JButton btnNodesBrowse;
    private javax.swing.JButton btnNodesCheck;
    private javax.swing.JButton btnNodesImport;
    private javax.swing.JButton btnNodesLoad;
    private javax.swing.JCheckBox chkEdgesCreateEdges;
    private javax.swing.JCheckBox chkEdgesCreateNodes;
    private javax.swing.JCheckBox chkNodesCreate;
    private javax.swing.JComboBox cmbEdgesMapping;
    private javax.swing.JComboBox cmbNodesMapping;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable tblEdges;
    private javax.swing.JTable tblNodes;
    private javax.swing.JTextField txtEdgesEdgesType;
    private javax.swing.JTextField txtEdgesFile;
    private javax.swing.JTextField txtEdgesNodeType;
    private javax.swing.JTextField txtEdgesNodeType1;
    private javax.swing.JTextField txtEdgesNodesCV;
    private javax.swing.JTextField txtEdgesNodesCV1;
    private javax.swing.JTextArea txtInstruction;
    private javax.swing.JTextField txtNodesCV;
    private javax.swing.JTextField txtNodesFile;
    private javax.swing.JTextField txtNodesType;
	private ListTableModel nodesModel;
	private ListTableModel edgesModel;
    /**
     * Creates new form TestSpreadsheet
     */
    public FlatFileNetworkImporter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
    	this.setResizable(false);
    	this.setTitle("Import data from tab-delimted file");
    	this.setClosable(true);
    	this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNodes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNodesFile = new javax.swing.JTextField();
        btnNodesBrowse = new javax.swing.JButton();
        btnNodesLoad = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbNodesMapping = new javax.swing.JComboBox();
        chkNodesCreate = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        txtNodesType = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtNodesCV = new javax.swing.JTextField();
        btnNodesCheck = new javax.swing.JButton();
        btnNodesImport = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtEdgesFile = new javax.swing.JTextField();
        btnEdgesBrowse = new javax.swing.JButton();
        btnEdgesLoad = new javax.swing.JButton();
        btnEdgesCheck = new javax.swing.JButton();
        btnEdgesImport = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        cmbEdgesMapping = new javax.swing.JComboBox();
        chkEdgesCreateNodes = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        txtEdgesNodeType = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtEdgesNodesCV = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblEdges = new javax.swing.JTable();
        chkEdgesCreateEdges = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        txtEdgesEdgesType = new javax.swing.JTextField();
        txtEdgesNodeType1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtEdgesNodesCV1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtInstruction = new javax.swing.JTextArea();

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblNodes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "A", "B", "C", "D"
            }
        ));
        tblNodes.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(tblNodes);
        jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        jLabel1.setText("File to import (tab-delimited):");

        txtNodesFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNodesFileActionPerformed(evt);
            }
        });

        btnNodesBrowse.setText("Browse...");
        btnNodesBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                	btnNodesBrowseActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        

        btnNodesLoad.setText("Load");
        btnNodesLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnNodesLoadActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jLabel2.setText("Mapping option:");

        cmbNodesMapping.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "On accession", "On name" }));

        chkNodesCreate.setText("create if missing");
		 chkNodesCreate.addActionListener(new java.awt.event.ActionListener() {
			 public void actionPerformed(java.awt.event.ActionEvent evt) {
				 if(chkNodesCreate.isSelected()){
					 txtNodesType.setEnabled(true);
					 txtNodesCV.setEnabled(true);
				 }
				 else{
					 txtNodesType.setEnabled(false);
					 txtNodesCV.setEnabled(false);
				 }
			 }
		 });

        jLabel3.setText("Node type:");

        txtNodesType.setText("Thing");

        jLabel4.setText("Data source:");

        txtNodesCV.setText("UC");

        btnNodesCheck.setText("Check");
        btnNodesCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNodesCheckActionPerformed(evt);
            }
        });

        btnNodesImport.setText("Import");
        btnNodesImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnNodesImportActionPerformed(evt);
            }
        });

        jLabel6.setText("Create subset:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNodesFile, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNodesBrowse))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbNodesMapping, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(chkNodesCreate)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNodesCV))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtNodesType, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(14, 14, 14)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNodesImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNodesCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNodesLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 25, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNodesFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNodesBrowse)
                    .addComponent(btnNodesLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbNodesMapping, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkNodesCreate)
                    .addComponent(btnNodesCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNodesType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNodesImport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNodesCV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Import nodes", jPanel1);

        jLabel15.setText("File to import (tab-delimited):");

        txtEdgesFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEdgesFileActionPerformed(evt);
            }
        });

        btnEdgesBrowse.setText("Browse...");
        btnEdgesBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
            		btnEdgesBrowseActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        

        btnEdgesLoad.setText("Load");
        btnEdgesLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					btnEdgesLoadActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnEdgesCheck.setText("Check");
        btnEdgesCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdgesCheckActionPerformed(evt);
            }
        });

        btnEdgesImport.setText("Import");
        btnEdgesImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnEdgesImportActionPerformed(evt);
            }
        });

        jLabel16.setText("Mapping option:");

        cmbEdgesMapping.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "On accession", "On name" }));

        chkEdgesCreateNodes.setText("create nodes if missing");
		 chkEdgesCreateNodes.addActionListener(new java.awt.event.ActionListener() {
			 public void actionPerformed(java.awt.event.ActionEvent evt) {
				 if(chkEdgesCreateNodes.isSelected()){
					 txtEdgesNodeType.setEnabled(true);
					 txtEdgesNodesCV.setEnabled(true);
					 txtEdgesNodeType1.setEnabled(true);
					 txtEdgesNodesCV1.setEnabled(true);
				 }
				 else{
					 txtEdgesNodeType.setEnabled(false);
					 txtEdgesNodesCV.setEnabled(false);
					 txtEdgesNodeType1.setEnabled(false);
					 txtEdgesNodesCV1.setEnabled(false);
				 }
			 }
		 });

        jLabel17.setText("Node A type:");

        txtEdgesNodeType.setText("Thing");

        jLabel18.setText("Data source A:");

        txtEdgesNodesCV.setText("UC");

        tblEdges.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tblEdges);
        jScrollPane5.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane5.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        chkEdgesCreateEdges.setText("create edges if missing");
		 chkEdgesCreateEdges.addActionListener(new java.awt.event.ActionListener() {
			 public void actionPerformed(java.awt.event.ActionEvent evt) {
				 if(chkEdgesCreateEdges.isSelected()){
					 txtEdgesEdgesType.setEnabled(true);
				 }
				 else{
					 txtEdgesEdgesType.setEnabled(false);
				 }
			 }
		 });

        jLabel19.setText("Edge type:");

        txtEdgesEdgesType.setText("r");

        txtEdgesNodeType1.setText("Thing");

        jLabel20.setText("Node B type:");

        jLabel21.setText("Data source B:");

        txtEdgesNodesCV1.setText("UC");

        jLabel5.setText("Create subset:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEdgesFile, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEdgesBrowse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbEdgesMapping, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chkEdgesCreateNodes))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel18)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtEdgesNodesCV))
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel17)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtEdgesNodeType, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel21)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtEdgesNodesCV1))
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel20)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtEdgesNodeType1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(chkEdgesCreateEdges)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField1))
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel19)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtEdgesEdgesType, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEdgesImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEdgesCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEdgesLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtEdgesFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdgesBrowse)
                    .addComponent(btnEdgesLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(cmbEdgesMapping, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkEdgesCreateNodes)
                    .addComponent(btnEdgesCheck)
                    .addComponent(chkEdgesCreateEdges))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnEdgesImport)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel17)
                                .addComponent(txtEdgesNodeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel18)
                                .addComponent(txtEdgesNodesCV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(txtEdgesNodeType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel19)
                                .addComponent(txtEdgesEdgesType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(txtEdgesNodesCV1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Import edges", jPanel4);

        txtInstruction.setEditable(false);
        txtInstruction.setBackground(new java.awt.Color(240, 240, 240));
        txtInstruction.setColumns(20);
        txtInstruction.setLineWrap(true);
        txtInstruction.setRows(5);
        txtInstruction.setText("The file for import must be tab-delimited and have a complete header for all the columns as its first row. The importer will attempt to match the content of the first column to the particular attribute of a node (if importing nodes) or source and target node of an edge (if importing edges). Data in all other columns will be imported as new attributes with the same name as the name of the respective columns.");
        jScrollPane3.setViewportView(txtInstruction);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 217, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Instructions", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
		txtEdgesEdgesType.setEnabled(false);
		txtEdgesNodeType.setEnabled(false);
		txtEdgesNodesCV.setEnabled(false);
		txtNodesCV.setEnabled(false);
		txtNodesType.setEnabled(false);
		txtEdgesNodeType1.setEnabled(false);
		txtEdgesNodesCV1.setEnabled(false);
        pack();
    }// </editor-fold>
	 private void btnNodesCheckActionPerformed(java.awt.event.ActionEvent evt) {

	 }

	 private void btnNodesLoadActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		 if(txtNodesFile.getText().trim().equals("")){
			 return;
		 }
		 if(!new File(txtNodesFile.getText()).exists() || new File(txtNodesFile.getText()).isDirectory()){
			 return;
		 }
		 BufferedReader br = new BufferedReader(new FileReader(new File(txtNodesFile.getText())));
		 String line = br.readLine();
		 String [] data = line.split("\t");
		 nodesModel = new ListTableModel(Arrays.asList(data));
		 tblNodes.setModel(nodesModel);
		 while((line = br.readLine()) != null){
			 nodesModel.addRow(line.split("\t"));
		 }
		 br.close();
		 nodesModel.setModelEditable(false);
	 }

	 private void btnEdgesLoadActionPerformed(java.awt.event.ActionEvent evt)throws Exception  {
		 if(txtEdgesFile.getText().trim().equals("")){
			 return;
		 }
		 if(!new File(txtEdgesFile.getText()).exists() || new File(txtEdgesFile.getText()).isDirectory()){
			 return;
		 }
		 BufferedReader br = new BufferedReader(new FileReader(new File(txtEdgesFile.getText())));
		 String line = br.readLine();
		 String [] data = line.split("\t");
		 edgesModel = new ListTableModel(Arrays.asList(data));
		 tblEdges.setModel(edgesModel);
		 while((line = br.readLine()) != null){
			 edgesModel.addRow(line.split("\t"));
		 }
		 br.close();
		 edgesModel.setModelEditable(false);
	 }

	 private void btnEdgesCheckActionPerformed(java.awt.event.ActionEvent evt) {
		 // TODO add your handling code here:
	 }

	 private void btnNodesBrowseActionPerformed(java.awt.event.ActionEvent evt) {
		 JFileChooser chooser=new  JFileChooser();
		 int returnVal = chooser.showOpenDialog(null);
		 if(returnVal == JFileChooser.APPROVE_OPTION) {
			 File f = chooser.getSelectedFile();
			 txtNodesFile.setText(f.getAbsolutePath());
		 }
	 }

	 private void btnEdgesBrowseActionPerformed(java.awt.event.ActionEvent evt) {
		 JFileChooser chooser=new  JFileChooser();
		 int returnVal = chooser.showOpenDialog(null);
		 if(returnVal == JFileChooser.APPROVE_OPTION) {
			 File f = chooser.getSelectedFile();
			 txtEdgesFile.setText(f.getAbsolutePath());
		 }
	 }

	 private void txtNodesFileActionPerformed(java.awt.event.ActionEvent evt) {
		 // TODO add your handling code here:
	 }

	 private void txtEdgesFileActionPerformed(java.awt.event.ActionEvent evt) {
		 // TODO add your handling code here:
	 }

	 private void chkEdgesCreateEdgesActionPerformed(java.awt.event.ActionEvent evt) {
		 // TODO add your handling code here:
	 }
	 
	 private void btnEdgesImportActionPerformed(java.awt.event.ActionEvent evt){
		 try {
			parseEdges();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 }
	 
	 private void btnNodesImportActionPerformed(java.awt.event.ActionEvent evt){
		 try {
			parseNodes();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 }

	 public void parseNodes() throws Exception{
		 OVTK2Desktop desktop = OVTK2Desktop.getInstance();
		 OVTK2PropertiesAggregator agg = desktop.getDesktopResources().getSelectedViewer();
		 ONDEXGraph graph;
		 if(agg == null){
			 String name = String.valueOf(OVTK2Viewer.instances);
			 graph = DesktopUtils.initGraph(name);
			 OVTK2Viewer viewer = DesktopUtils.initViewer(graph);
			 desktop.getDesktopResources().setSelectedViewer(viewer);
			 desktop.display(viewer, Position.centered);
			 WelcomeDialog.getInstance(desktop).setVisible(false);
			 agg = desktop.getDesktopResources().getSelectedViewer();
		 }
		 graph = agg.getONDEXJUNGGraph();
		 VisualizationHandler vh = new VisualizationHandler();
		 vh.processingStarted();
		 
		 if(txtNodesFile.getText().trim().equals("")){
			 return;
		 }
		 if(!new File(txtNodesFile.getText()).exists() || new File(txtNodesFile.getText()).isDirectory()){
			 return;
		 }
		 SetMultimap<String, ONDEXConcept> index =  Multimaps.newSetMultimap(Maps.<String, Collection<ONDEXConcept>> newHashMap(), DefaultSuppliers.set(ONDEXConcept.class));
		 if(cmbNodesMapping.getSelectedIndex() != 0){
			 if(cmbNodesMapping.getSelectedIndex() == 1){
				 for(ONDEXConcept c : graph.getConcepts()){
					 for(ConceptAccession ca : c.getConceptAccessions()){
						 if(!ca.isAmbiguous()){
							 index.put(ca.getAccession(), c);
						 }
					 }
				 }
			 }
			 else if(cmbNodesMapping.getSelectedIndex() == 2){
				 for(ONDEXConcept c : graph.getConcepts()){
					 for(ConceptName name : c.getConceptNames()){
						 index.put(name.getName(), c);
					 }
				 }
			 }
		 }

		 BufferedReader br = new BufferedReader(new FileReader(new File(txtNodesFile.getText())));
		 String line = br.readLine();
		 String [] title = line.split("\t");
		 boolean finished = false;
		 Class [] cls = new Class[title.length];
		 while((line = br.readLine()) != null && finished == false){
			 String [] data = line.split("\t");
			 if(data.length < title.length){
				 data = Arrays.copyOf(data, title.length);
				 for(int i = 0; i < title.length; i++){
					 if(data[i] == null){
						 data[i] = "";
					 }
				 }
			 }
			 for(int i = 1; i < title.length; i++){
				 if(cls[i] == null){
					 if(!data[i].trim().equals("")){
						 try{
							 Double.valueOf(data[i]);
							 cls[i] = Double.class;
						 }
						 catch(NumberFormatException e){
							 cls[i] = String.class;
						 }
					 }
				 }
			 }
			 for(int i = 1; i < title.length; i++){
				 finished = true;
				 if(cls[i] == null){
					 finished = false;
					 break;
				 }
			 }
		 }
		 for(int i = 1; i < title.length; i++){
			 if(cls[i] == null){
				 cls[i] = String.class;
			 }
			 title[i] = title[i].trim().replaceAll(" ", "_");
		 }
		 br.close();
		 AttributeName [] ans = new  AttributeName[title.length];
		 for(int i =1; i < cls.length; i++){
			 ans[i] = MdHelper.createAttName(graph, title[i], cls[i]);
		 }
		 ConceptClass cc = null;
		 DataSource cv = null;
		 DataSource uc = MdHelper.createDataSource(graph, "UC");
		 EvidenceType ev = MdHelper.createEvidence(graph, "IMPD");
		 if(chkNodesCreate.isSelected()){
			 if(!txtNodesType.getText().trim().equals("")){
				 cc = MdHelper.createCC(graph, txtNodesType.getText());
			 }
			 else{
				 cc = MdHelper.createCC(graph, "Thing");
			 }
			 if(!txtNodesCV.getText().trim().equals("")){
				 cv = MdHelper.createDataSource(graph, txtNodesCV.getText().trim());
			 }
			 else{
				 cv = MdHelper.createDataSource(graph, "UC");
			 }
		 }

		 ONDEXConcept tag = null;
		 Set<Integer> columns = new HashSet<Integer>();
		 Map<ArrayKey<Object>, ONDEXConcept> tags = new HashMap<ArrayKey<Object>, ONDEXConcept>();


		 if(!jTextField2.getText().trim().equals("")){
			 br = new BufferedReader(new FileReader(new File(txtNodesFile.getText())));
			 String [] header = br.readLine().split("\t");
			 boolean matched = false;
			 String text = jTextField2.getText().trim();
			 for(String h : header){
				 if(h.equals(text)){
					 matched = true;
					 break;
				 }
			 }
			 if(matched || jTextField2.getText().contains(",")){
				 String [] head = jTextField2.getText().split(",");
				 for(int i = 0; i < head.length; i++){
					 head[i] = head[i].trim();
				 }

				 for(int i = 0; i < header.length; i++){
					 for(String h : head){
						 if(h.equals(header[i])){
							 columns.add(i);
						 }
					 }
				 }
				 SetMultimap<Integer, String> ext =  Multimaps.newSetMultimap(Maps.<Integer, Collection<String>> newHashMap(), DefaultSuppliers.set(String.class));
				 while((line = br.readLine()) != null){
					 String [] data = line.split("\t");
					 if(data.length < title.length){
						 data = Arrays.copyOf(data, title.length);
						 for(int i = 0; i < title.length; i++){
							 if(data[i] == null){
								 data[i] = "";
							 }
						 }
					 }
					 for(Integer i : columns){
						 if(!data[i].equals("")){
							 ext.put(i, data[i]); 
						 }
					 }
				 }
				 for(Entry<Integer, Collection<String>>ent : ext.asMap().entrySet()){
					 for(String s : ent.getValue()){
						 String name = String.valueOf(header[ent.getKey()])+"_"+s;
						 ONDEXConcept tag1 = graph.getFactory().createConcept(name, uc, MdHelper.createCC(graph, "Subset"), ev);
						 tag1.createConceptName(name, true);
						 tags.put(new ArrayKey<Object>(new Object[]{ent.getKey(), s}), tag1);
					 }
				 }
			 }
			 else{
				 tag = graph.getFactory().createConcept(jTextField2.getText().trim(), uc, MdHelper.createCC(graph, "Subset"), ev);
				 tag.createConceptName(jTextField2.getText().trim(), true); 
			 }
			 br.close();
		 }

		 br = new BufferedReader(new FileReader(new File(txtNodesFile.getText())));
		 line = br.readLine();
		 while((line = br.readLine()) != null){
			 String [] data = line.split("\t");
			 if(data.length < title.length){
				 data = Arrays.copyOf(data, title.length);
				 for(int i = 0; i < title.length; i++){
					 if(data[i] == null){
						 data[i] = "";
					 }
				 }
			 }
			 if(!data[0].trim().equals("")){
				 Set<ONDEXConcept> set = index.get(data[0]);
				 if(set == null){
					 set = new HashSet<ONDEXConcept>();
				 }
				 if(set.isEmpty() && chkNodesCreate.isSelected()){
					 ONDEXConcept c = graph.getFactory().createConcept(data[0], uc, cc, ev);
					 set.add(c);
					 if(cmbNodesMapping.getSelectedIndex() == 1){
						 c.createConceptAccession(data[0], cv, false);
					 }
					 else if(cmbNodesMapping.getSelectedIndex() == 2){
						 c.createConceptName(data[0], true);
					 }
					 index.put(data[0], c);
				 }
				 ArrayKey<Object> masterKey = new ArrayKey<Object>(new Object[]{null, null});
				 
				 for(ONDEXConcept s : set){
					 if(tag != null){
						 s.addTag(tag); 
					 }
					 else if(!tags.isEmpty()){
						 for(Integer i : columns){
							 if(!data[i].equals("")){
								 masterKey.getArray()[0] = i;	 
								 masterKey.getArray()[1] = data[i];
								 s.addTag(tags.get(masterKey));
							 }
						 }
					 }
					 for(int i = 1; i < data.length; i++){
						 if(!data[i].trim().equals("")){
							 if(s.getAttribute(ans[i]) == null){
								 if(ans[i].getDataType().equals(Double.class)){
									 try{
										 s.createAttribute(ans[i], Double.valueOf(data[i]), false);	 
									 }
									 catch(NumberFormatException e){
										 e.printStackTrace();
									 }
								 }
								 else{
									 s.createAttribute(ans[i], data[i].toString(), false);	 
								 }
							 }
						 }
					 }
				 }
			 }
		 }
		 br.close();
		 vh.processingFinished();
		 agg.getVisualizationViewer().getModel().fireStateChanged();
		 agg.updateViewer(null);
	 }

	 public void parseEdges() throws Exception{
		 
		 OVTK2Desktop desktop = OVTK2Desktop.getInstance();
		 OVTK2PropertiesAggregator agg = desktop.getDesktopResources().getSelectedViewer();
		 ONDEXGraph graph;
		 if(agg == null){
			 String name = String.valueOf(OVTK2Viewer.instances);
			 graph = DesktopUtils.initGraph(name);
			 OVTK2Viewer viewer = DesktopUtils.initViewer(graph);
			 desktop.getDesktopResources().setSelectedViewer(viewer);
			 desktop.display(viewer, Position.centered);
			 WelcomeDialog.getInstance(desktop).setVisible(false);
			 agg = desktop.getDesktopResources().getSelectedViewer();
		 }
		 graph = agg.getONDEXJUNGGraph();
		 VisualizationHandler vh = new VisualizationHandler();
		 vh.processingStarted();
		 if(txtEdgesFile.getText().trim().equals("")){
			 return;
		 }
		 if(!new File(txtEdgesFile.getText()).exists() || new File(txtEdgesFile.getText()).isDirectory()){
			 return;
		 }
		 SetMultimap<String, ONDEXConcept> index =  Multimaps.newSetMultimap(Maps.<String, Collection<ONDEXConcept>> newHashMap(), DefaultSuppliers.set(ONDEXConcept.class));
		 if(cmbEdgesMapping.getSelectedIndex() != 0){
			 if(cmbEdgesMapping.getSelectedIndex() == 1){
				 for(ONDEXConcept c : graph.getConcepts()){
					 for(ConceptAccession ca : c.getConceptAccessions()){
						 if(!ca.isAmbiguous()){
							 index.put(ca.getAccession(), c);
						 }
					 }
				 }
			 }
			 else if(cmbEdgesMapping.getSelectedIndex() == 2){
				 for(ONDEXConcept c : graph.getConcepts()){
					 for(ConceptName name : c.getConceptNames()){
						 index.put(name.getName(), c);
					 }
				 }
			 }
		 }

		 BufferedReader br = new BufferedReader(new FileReader(new File(txtEdgesFile.getText())));
		 String line = br.readLine();
		 String [] title = line.split("\t");
		 boolean finished = false;
		 Class [] cls = new Class[title.length];
		 while((line = br.readLine()) != null && finished == false){
			 String [] data = line.split("\t");
			 if(data.length < title.length){
				 data = Arrays.copyOf(data, title.length);
				 for(int i = data.length-1; i < title.length; i++){
					 data[i] = "";
				 }
			 }
			 for(int i = 2; i < title.length; i++){
				 if(cls[i] == null){
					 if(!data[i].trim().equals("")){
						 try{
							 Double.valueOf(data[i]);
							 cls[i] = Double.class;
						 }
						 catch(NumberFormatException e){
							 cls[i] = String.class;
						 }
					 }
				 }
			 }
			 for(int i = 2; i < title.length; i++){
				 finished = true;
				 if(cls[i] == null){
					 finished = false;
					 break;
				 }
			 }
		 }
		 for(int i = 2; i < title.length; i++){
			 if(cls[i] == null){
				 cls[i] = String.class;
			 }
			 title[i] = title[i].trim().replaceAll(" ", "_");
		 }
		 br.close();
		 AttributeName [] ans = new  AttributeName[title.length];
		 for(int i =2; i < cls.length; i++){
			 ans[i] = MdHelper.createAttName(graph, title[i], cls[i]);
		 }
		 ConceptClass cc = null;
		 DataSource cv = null;
		 ConceptClass cc1 = null;
		 DataSource cv1 = null;
		 DataSource uc = MdHelper.createDataSource(graph, "UC");
		 EvidenceType ev = MdHelper.createEvidence(graph, "IMPD");

		 if(chkEdgesCreateNodes.isSelected()){
			 if(!txtEdgesNodeType.getText().trim().equals("")){
				 cc = MdHelper.createCC(graph, txtEdgesNodeType.getText().trim()); 
			 }
			 else{
				 cc = MdHelper.createCC(graph, "Thing");
			 }
			 if(!txtEdgesNodeType1.getText().trim().equals("")){
				 cc1 = MdHelper.createCC(graph, txtEdgesNodeType1.getText().trim());
			 }
			 else{
				 cc1 = MdHelper.createCC(graph, "Thing");
			 }

			 if(!txtEdgesNodesCV.getText().trim().equals("")){
				 cv = MdHelper.createDataSource(graph, txtEdgesNodesCV.getText().trim());
			 }
			 else{
				 cv = MdHelper.createDataSource(graph, "UC");
			 }
			 if(!txtEdgesNodesCV1.getText().trim().equals("")){
				 cv1 = MdHelper.createDataSource(graph, txtEdgesNodesCV1.getText().trim());	 
			 }
			 else{
				 cv1 = MdHelper.createDataSource(graph, "UC");
			 }
		 }

		 ONDEXConcept tag = null;
		 if(!jTextField1.getText().trim().equals("")){
			 tag = graph.getFactory().createConcept(jTextField1.getText().trim(), uc, MdHelper.createCC(graph, "Subset"), ev);
			 tag.createConceptName(jTextField1.getText().trim(), true);
		 }


		 br = new BufferedReader(new FileReader(new File(txtEdgesFile.getText())));
		 line = br.readLine();
		 
		 List<ONDEXConcept> set1 = new ArrayList<ONDEXConcept>();
		 while((line = br.readLine()) != null){
			 String [] data = line.split("\t");
			 if(data.length < title.length){
				 data = Arrays.copyOf(data, title.length);
				 for(int i = 0; i < title.length; i++){
					 if(data[i] == null){
						 data[i] = "";
					 }
				 }
			 }
			 if(!data[0].trim().equals("")){
				 Set<ONDEXConcept> temp = index.get(data[0]);
				 
				 if(temp == null){
					 set1 = new ArrayList<ONDEXConcept>();
				 }
				 else{
					 set1 = new ArrayList<ONDEXConcept>(temp);
				 }
				 if(set1.isEmpty() && chkEdgesCreateNodes.isSelected()){
					 ONDEXConcept c = graph.getFactory().createConcept(data[0], cv, cc, ev);
					 set1.add(c);
					 if(cmbEdgesMapping.getSelectedIndex() == 1){
						 c.createConceptAccession(data[0], cv, false);
					 }
					 else if(cmbEdgesMapping.getSelectedIndex() == 2){
						 c.createConceptName(data[0], true);
					 }
					 index.put(data[0], c);
				 }
				 for(ONDEXConcept s : set1){
					 if(tag != null){
						 s.addTag(tag); 
					 }
				 }
			 }
			 List<ONDEXConcept> set2 = new ArrayList<ONDEXConcept>();
			 if(!data[1].trim().equals("")){
				 Set<ONDEXConcept> temp = index.get(data[1]);
				 
				 if(temp == null){
					 set2 = new ArrayList<ONDEXConcept>();
				 }
				 else{
					 set2 = new ArrayList<ONDEXConcept>(temp);
				 }
				 if(set2.isEmpty() && chkEdgesCreateNodes.isSelected()){
					 ONDEXConcept c = graph.getFactory().createConcept(data[1], cv1, cc1, ev);
					 set2.add(c);
					 if(cmbEdgesMapping.getSelectedIndex() == 1){
						 c.createConceptAccession(data[1], cv, false);
					 }
					 else if(cmbEdgesMapping.getSelectedIndex() == 2){
						 c.createConceptName(data[1], true);
					 }
					 index.put(data[1], c);
				 }
				 for(ONDEXConcept s : set2){
					 if(tag != null){
						 s.addTag(tag); 
					 }
				 }
			 }
			 
			 RelationType rt;
			 if(!txtEdgesEdgesType.getText().trim().equals("")){
				 rt = MdHelper.createRT(graph, txtEdgesEdgesType.getText().trim());
			 }
			 else{
				 rt= MdHelper.createRT(graph, "r");
			 }

			 if(!set1.isEmpty() && !set2.isEmpty()){
				 for(ONDEXConcept s1 : set1){
					 for(ONDEXConcept s2 : set2){
						 ONDEXRelation r = graph.getRelation(s1, s2, rt);
						 if(r == null && chkEdgesCreateEdges.isSelected()){
							 r = graph.getFactory().createRelation(s1, s2, rt, ev);	 
						 }
						 if(r == null){
							 continue;
						 }
						 for(int i = 2; i < data.length; i++){
							 if(!data[i].trim().equals("")){
								 if(r.getAttribute(ans[i]) == null){
									 if(ans[i].getDataType().equals(Double.class)){
										 try{
											 r.createAttribute(ans[i], Double.valueOf(data[i]), false);	 
										 }
										 catch(NumberFormatException e){
											 e.printStackTrace();
										 }
									 }
									 else{
										 r.createAttribute(ans[i], data[i].toString(), false);	 
									 }
								 }
							 }
						 }
					 }
				 }
			 }
		 }
		 br.close();
		 vh.processingFinished();
		 agg.getVisualizationViewer().getModel().fireStateChanged();
		 agg.updateViewer(null);
	 }
}
