<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	>

	<description><![CDATA[
	The default mapping for net.sourceforge.ondex.parser.owl.OWLMapper. This uses mappings from common elements in OWL
	files, such as rdfs:label or rdfs:comment.
	
	This file is usually imported by a configuration that is specific to a particular ontology file.
	
	Have a look at TODO and the Spring documentation, eg, https://www.tutorialspoint.com/spring/spring_bean_definition.htm
	to know how this file works. Also, see the OWL parser code to figure out which Java components are available for 
	mapping your ontology to ONDEX.
	]]></description>
	
	<!-- 
	  These are minimal defaults, you can override them by using a different proper JavaBean class for the 'class' attributes 
	  and by using the 'property' element for setting properties with what corresponds to the methods setXXX defined for
	  the JavaBean class chosen at the top of the bean definition (or for super-classes).
	-->
	
	
	<!-- The base mapper parses an ontology top-down, starting from the ontology root classes -->
	<bean id = "defaultOwlMapper" class = "net.sourceforge.ondex.parser.owl.OWLInfMapper">
		<property name="conceptClassMapper" ref = "conceptClassMapper" />
		<property name="conceptMapper" ref = "conceptMapper" />
		<property name="rootsScanner" ref = "rootsScanner" />
		
		<!-- For instance, here you might want to override the default (default is true) -->
		<!--  property name="doMapRootsToConcepts" value ="false" / -->
		
		<!-- Or add other linkers. Typically you will want to add linkers here by means of the merge = 'true' flag in the
		     list tag, see eg, go_relations_test_cfg.xml -->
		<property name = "linkers">
			<list>
				<bean class = "net.sourceforge.ondex.parser.ExploringMapper.LinkerConfiguration">
					<property name="scanner">
						<bean class = "net.sourceforge.ondex.parser.owl.OWLSubClassScanner" />
					</property>
					<property name = "mapper" ref = "isaInvertedMapper" />
				</bean>
			</list>
		</property>
	</bean>
		
	<bean id = "rootsScanner" class = "net.sourceforge.ondex.parser.owl.OwlRootClassesScanner" />



	<!-- OBO/OWL class relations -->

	<!-- We use the inverting mapper, for those scanned/mapped/computed relations going from parent to child, 
			 which obviously need that is-a is instantiated in the opposite direction. --> 
	<bean id = "isaInvertedMapper" class = "net.sourceforge.ondex.parser.InvertingConceptRelMapper">
		<property name = "baseMapper" ref = "isaMapper" />
	</bean>

	<bean id = "isaMapper" class = "net.sourceforge.ondex.parser.SimpleRelationMapper">
		<!-- Every relation created from this mapper has this relation type (the prototype just contains
		     constants to instantiate the relation type -->
		<property 
			name ="relationTypePrototype" 
		  value = "#{T( net.sourceforge.ondex.core.util.prototypes.RelationTypePrototype ).IS_A_PROTOTYPE }"/>
	</bean>


	<bean id = "partOfMapper" class = "net.sourceforge.ondex.parser.SimpleRelationMapper">
		<property name ="relationTypePrototype">
			<bean class = "net.sourceforge.ondex.core.util.prototypes.RelationTypePrototype">
				<property name="id" value = "part_of" />
				<property name="fullName" value = "part of" />
				<property name="antisymmetric" value = "true" />
				<property name="transitive" value = "true" />
			</bean>
		</property> 
	</bean>


	<!--
		By default, the OWLMapper uses its 'rootsScanner' property to get the roots of an ontology and pass them to this
		mapper, which it uses to create corresponding concept classes. 'doMapRootsToConcepts' determines if these 
		classes will become concepts too. Usually, if you use this mapper, you will want this flag to be false, while
		you want it to be true in combination with a constant class mapper (eg, see the to_cfg.xml file).
	-->
	<bean id = "conceptClassMapper" class = "net.sourceforge.ondex.parser.owl.OWLTopConceptClassMapper">
	  <property name = "idMapper" ref = "idMapper" />
	  <property name = "fullNameMapper" ref = "nameMapper" />
	  <property name = "descriptionMapper" ref = "descriptionMapper" />
	</bean>

	<bean id = "conceptMapper" class = "net.sourceforge.ondex.parser.DefaultConceptMapper">
	  <property name = "idMapper" ref = "idMapper" />
	  <property name = "descriptionMapper" ref = "descriptionMapper" />	  
	  <property name = "preferredNameMapper" ref = "nameMapper" />
	  <property name = "accessionsMapper" ref = "accessionsMapper" />
	  <property name = "dataSourceMapper" ref = "dataSourceMapper" />
	  <property name = "altNamesMapper" ref = "altNamesMapper" />
	  <!-- 
	    See the class DefaultConceptMapper for default properties (setXXX) you might want to change here 
	    eg, annotationMapper, evidenceMapper, altNamesMapper
	  -->	
	</bean>

	<bean id = "accessionsMapper" class = "net.sourceforge.ondex.parser.owl.OBOWLAccessionsMapper">
		<property name="propertyIri" value = "#{ns.iri ( 'dcterms:identifier' )}" />
	</bean>


	<bean id = "idMapper" class = "net.sourceforge.ondex.parser.owl.IRIBasedIdMapper" />
	<!-- Useful in cases like iriBasedAccessionsMapper -->
	<bean id = "idMapperAdapter" class = "net.sourceforge.ondex.parser.utils.Single2TextsMapper">
		<property name = "baseMapper" ref = "idMapper" />
	</bean>
	
	<bean id = "iriBasedAccessionsMapper" class = "net.sourceforge.ondex.parser.DefaultAccessionsMapper" >
		<property name = "accessionValuesMapper" ref = "idMapperAdapter" />
		<property name = "dataSourcesMapper" ref = "dataSourcesMapper" />
		<property name = "ambiguityMapper">
			<bean class = "net.sourceforge.ondex.parser.ConstStreamMapper">
				<!-- This forces the generic class to be acknowledged as a boolean container -->
				<constructor-arg index = "0" value = "#{T(java.lang.Boolean).FALSE}" />
			</bean>
		</property>
	</bean>
	
	<bean id = "nameMapper" class = "net.sourceforge.ondex.parser.owl.OWLTextMapper">
	  <property name = "propertyIri" value = "#{ns.iri ( 'rdfs:label' )}" />
	</bean>

	<!-- This is null by default, define your own net.sourceforge.ondex.parser.owl.OWLTextsMapper to map alt names (eg, see
	     GO files)  -->
	<bean id = "altNamesMapper" factory-bean = "nullBeanFactory" factory-method = "get" />
	
	<bean id = "descriptionMapper" class = "net.sourceforge.ondex.parser.owl.OWLTextMapper">
	  <property name = "propertyIri" value = "#{ns.iri ( 'rdfs:comment' )}" />
	</bean>
		
		
		
	<bean id = "dataSourceMapper" class = "net.sourceforge.ondex.parser.ConstDataSourceMapper">
		<property name="value" ref = "dataSourcePrototype" />
	</bean>
	<bean id = "dataSourcesMapper" class = "net.sourceforge.ondex.parser.ConstDataSourcesMapper">
		<property name="value" ref = "dataSourcePrototype" />
	</bean>
	<util:constant id = "dataSourcePrototype" 
		static-field = "net.sourceforge.ondex.parser.owl.Utils.OWL_PARSER_DATA_SOURCE"/>

		
		
	<!-- ____________________________ Misc Utilities ____________________________ -->
		
		
	<!-- This is called via SpEl, see above -->
	<bean id = "ns" class = "info.marcobrandizi.rdfutils.namespaces.NamespaceUtils" />
	
	<!-- 
		This is the default OntModel that we use to load the input OWL. As you can see, we disable any type of 
	  inference and other features we don't need. You might define your own model by overriding this bean. Beware
	  that inference might be slow. 
	-->
	<bean id = "jenaOntModel" class = "org.apache.jena.rdf.model.ModelFactory" 
		scope = "prototype"
		factory-method="createOntologyModel">
		<constructor-arg>
			<!-- 
				Some tricky composition to disable the processing of owl:imports
			-->
			<bean class = "org.apache.jena.ontology.OntModelSpec">
				<!-- As said above, OWL_MEM means no inference -->
				<constructor-arg value = "#{T( org.apache.jena.ontology.OntModelSpec ).OWL_MEM }" />
				<property name = "documentManager">
					<bean class = "org.apache.jena.ontology.OntDocumentManager">
						<!--
						  We're usually just fine with the plug-in input file imports can be possibly loaded by separated
							plug-in instances (and config files)
						-->
						<property name = "processImports" value = "false" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
		<!-- Avoids complaints like referred OWL classes that are not defined explicitly (happens in tests) -->
		<property name = "strictMode" value = "false" />
	</bean>
	
	
		
	<!-- 
	  Provides a factory bean that returns a null bean, via factory-method = 'get' (see above)
	  Null beans are used to create named placeholders, which can be overridden in descendant files with the real bean 
	  you need. 
	-->
	<bean id = "nullBeanFactory" class = "java.util.concurrent.atomic.AtomicReference" >
		<constructor-arg><null/></constructor-arg>
	</bean>
	
	<!-- Used in a few mappings, eg, to set accession ambiguity to a fixed value -->
	<bean id = "trueMapper" class = "net.sourceforge.ondex.parser.ConstMapper">
		<property name = "value" value = "#{true}"/>
	</bean>
	<bean id = "falseMapper" class = "net.sourceforge.ondex.parser.ConstMapper">
		<property name = "value" value = "#{false}"/>
	</bean>
	
</beans>
